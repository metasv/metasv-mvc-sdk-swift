//
// BlockAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class BlockAPI {
    /**
     Get block request by height or hash
     
     - parameter blockId: (path) The block id, height or hash acceptable. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func blockBlockIdGet(blockId: String, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlockHeader?,_ error: Error?) -> Void)) {
        blockBlockIdGetWithRequestBuilder(blockId: blockId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get block request by height or hash
     - GET /block/{blockId}
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter blockId: (path) The block id, height or hash acceptable. 
     - returns: RequestBuilder<BlockHeader> 
     */
    open class func blockBlockIdGetWithRequestBuilder(blockId: String) -> RequestBuilder<BlockHeader> {
        var path = "/block/{blockId}"
        let blockIdPreEscape = "\(APIHelper.mapValueToPathItem(blockId))"
        let blockIdPostEscape = blockIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{blockId}", with: blockIdPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BlockHeader>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get recent block list by paging. 30 items per page.
     
     - parameter last: (query) paging flag, height of last item in last page (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func blockGet(last: Int64? = nil, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [BlockHeader]?,_ error: Error?) -> Void)) {
        blockGetWithRequestBuilder(last: last).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get recent block list by paging. 30 items per page.
     - GET /block
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter last: (query) paging flag, height of last item in last page (optional)
     - returns: RequestBuilder<[BlockHeader]> 
     */
    open class func blockGetWithRequestBuilder(last: Int64? = nil) -> RequestBuilder<[BlockHeader]> {
        let path = "/block"
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "last": last?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BlockHeader]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get current blockchain info from full node.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func blockInfoGet(apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlockchainInfo?,_ error: Error?) -> Void)) {
        blockInfoGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get current blockchain info from full node.
     - GET /block/info
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<BlockchainInfo> 
     */
    open class func blockInfoGetWithRequestBuilder() -> RequestBuilder<BlockchainInfo> {
        let path = "/block/info"
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BlockchainInfo>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
