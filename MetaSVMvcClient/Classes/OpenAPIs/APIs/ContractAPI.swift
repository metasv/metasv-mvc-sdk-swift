//
// ContractAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ContractAPI {
    /**
     Get all contract token balances for specific address ignoring all unconfirmed txs.
     
     - parameter address: (path) the requested address 
     - parameter codeHash: (query) Filter by contract code hash 
     - parameter genesis: (query) Filter by contract genesis 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func contractFtAddressAddressBalanceConfirmedGet(address: String, codeHash: String, genesis: String, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: Int64?,_ error: Error?) -> Void)) {
        contractFtAddressAddressBalanceConfirmedGetWithRequestBuilder(address: address, codeHash: codeHash, genesis: genesis).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all contract token balances for specific address ignoring all unconfirmed txs.
     - GET /contract/ft/address/{address}/balance/confirmed
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter address: (path) the requested address 
     - parameter codeHash: (query) Filter by contract code hash 
     - parameter genesis: (query) Filter by contract genesis 
     - returns: RequestBuilder<Int64> 
     */
    open class func contractFtAddressAddressBalanceConfirmedGetWithRequestBuilder(address: String, codeHash: String, genesis: String) -> RequestBuilder<Int64> {
        var path = "/contract/ft/address/{address}/balance/confirmed"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "codeHash": codeHash.encodeToJSON(), 
            "genesis": genesis.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Int64>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all contract token balances for specific address.
     
     - parameter address: (path) the requested address 
     - parameter codeHash: (query) Filter by contract code hash (optional)
     - parameter genesis: (query) Filter by contract genesis (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func contractFtAddressAddressBalanceGet(address: String, codeHash: String? = nil, genesis: String? = nil, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ContractFtBalance]?,_ error: Error?) -> Void)) {
        contractFtAddressAddressBalanceGetWithRequestBuilder(address: address, codeHash: codeHash, genesis: genesis).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all contract token balances for specific address.
     - GET /contract/ft/address/{address}/balance
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter address: (path) the requested address 
     - parameter codeHash: (query) Filter by contract code hash (optional)
     - parameter genesis: (query) Filter by contract genesis (optional)
     - returns: RequestBuilder<[ContractFtBalance]> 
     */
    open class func contractFtAddressAddressBalanceGetWithRequestBuilder(address: String, codeHash: String? = nil, genesis: String? = nil) -> RequestBuilder<[ContractFtBalance]> {
        var path = "/contract/ft/address/{address}/balance"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "codeHash": codeHash?.encodeToJSON(), 
            "genesis": genesis?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ContractFtBalance]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all contract token utxos for specific address.
     
     - parameter address: (path) the requested address 
     - parameter codeHash: (query) Filter by contract code hash (optional)
     - parameter genesis: (query) Filter by contract genesis (optional)
     - parameter flag: (query) The flag of the last query Item(Paging flag) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func contractFtAddressAddressUtxoGet(address: String, codeHash: String? = nil, genesis: String? = nil, flag: String? = nil, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ContractFtUtxo]?,_ error: Error?) -> Void)) {
        contractFtAddressAddressUtxoGetWithRequestBuilder(address: address, codeHash: codeHash, genesis: genesis, flag: flag).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all contract token utxos for specific address.
     - GET /contract/ft/address/{address}/utxo
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter address: (path) the requested address 
     - parameter codeHash: (query) Filter by contract code hash (optional)
     - parameter genesis: (query) Filter by contract genesis (optional)
     - parameter flag: (query) The flag of the last query Item(Paging flag) (optional)
     - returns: RequestBuilder<[ContractFtUtxo]> 
     */
    open class func contractFtAddressAddressUtxoGetWithRequestBuilder(address: String, codeHash: String? = nil, genesis: String? = nil, flag: String? = nil) -> RequestBuilder<[ContractFtUtxo]> {
        var path = "/contract/ft/address/{address}/utxo"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "codeHash": codeHash?.encodeToJSON(), 
            "genesis": genesis?.encodeToJSON(), 
            "flag": flag?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ContractFtUtxo]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get confirmed utxo count for specific nft(ignore all unconfirmed txs).
     
     - parameter address: (path) the requested address 
     - parameter codeHash: (query) Filter by contract code hash 
     - parameter genesis: (query) Filter by contract genesis 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func contractNftAddressAddressCountConfirmedGet(address: String, codeHash: String, genesis: String, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        contractNftAddressAddressCountConfirmedGetWithRequestBuilder(address: address, codeHash: codeHash, genesis: genesis).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get confirmed utxo count for specific nft(ignore all unconfirmed txs).
     - GET /contract/nft/address/{address}/count/confirmed
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter address: (path) the requested address 
     - parameter codeHash: (query) Filter by contract code hash 
     - parameter genesis: (query) Filter by contract genesis 
     - returns: RequestBuilder<Int> 
     */
    open class func contractNftAddressAddressCountConfirmedGetWithRequestBuilder(address: String, codeHash: String, genesis: String) -> RequestBuilder<Int> {
        var path = "/contract/nft/address/{address}/count/confirmed"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "codeHash": codeHash.encodeToJSON(), 
            "genesis": genesis.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Int>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get nft summary(NFT count group by genesis) for address.
     
     - parameter address: (path) the requested address 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func contractNftAddressAddressSummaryGet(address: String, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ContractNftAddressSummary]?,_ error: Error?) -> Void)) {
        contractNftAddressAddressSummaryGetWithRequestBuilder(address: address).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get nft summary(NFT count group by genesis) for address.
     - GET /contract/nft/address/{address}/summary
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter address: (path) the requested address 
     - returns: RequestBuilder<[ContractNftAddressSummary]> 
     */
    open class func contractNftAddressAddressSummaryGetWithRequestBuilder(address: String) -> RequestBuilder<[ContractNftAddressSummary]> {
        var path = "/contract/nft/address/{address}/summary"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ContractNftAddressSummary]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all contract nft token utxos for specific address.
     
     - parameter address: (path) the requested address 
     - parameter codeHash: (query) Filter by contract code hash (optional)
     - parameter genesis: (query) Filter by contract genesis (optional)
     - parameter limit: (query) Limit the return count(no more than 300) (optional)
     - parameter flag: (query) The flag of the last query Item(Paging flag) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func contractNftAddressAddressUtxoGet(address: String, codeHash: String? = nil, genesis: String? = nil, limit: Int? = nil, flag: String? = nil, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ContractNftUtxo]?,_ error: Error?) -> Void)) {
        contractNftAddressAddressUtxoGetWithRequestBuilder(address: address, codeHash: codeHash, genesis: genesis, limit: limit, flag: flag).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all contract nft token utxos for specific address.
     - GET /contract/nft/address/{address}/utxo
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter address: (path) the requested address 
     - parameter codeHash: (query) Filter by contract code hash (optional)
     - parameter genesis: (query) Filter by contract genesis (optional)
     - parameter limit: (query) Limit the return count(no more than 300) (optional)
     - parameter flag: (query) The flag of the last query Item(Paging flag) (optional)
     - returns: RequestBuilder<[ContractNftUtxo]> 
     */
    open class func contractNftAddressAddressUtxoGetWithRequestBuilder(address: String, codeHash: String? = nil, genesis: String? = nil, limit: Int? = nil, flag: String? = nil) -> RequestBuilder<[ContractNftUtxo]> {
        var path = "/contract/nft/address/{address}/utxo"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "codeHash": codeHash?.encodeToJSON(), 
            "genesis": genesis?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "flag": flag?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ContractNftUtxo]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all contract nft token utxos by codeHash and genesisId.
     
     - parameter codeHash: (path) Code hash of the token. 
     - parameter nftId: (path) Nft id of this auction. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGet(codeHash: String, nftId: String, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ContractNftAuctionUtxo]?,_ error: Error?) -> Void)) {
        contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetWithRequestBuilder(codeHash: codeHash, nftId: nftId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all contract nft token utxos by codeHash and genesisId.
     - GET /contract/nft/auction/codeHash/{codeHash}/nftId/{nftId}/utxo
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter codeHash: (path) Code hash of the token. 
     - parameter nftId: (path) Nft id of this auction. 
     - returns: RequestBuilder<[ContractNftAuctionUtxo]> 
     */
    open class func contractNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetWithRequestBuilder(codeHash: String, nftId: String) -> RequestBuilder<[ContractNftAuctionUtxo]> {
        var path = "/contract/nft/auction/codeHash/{codeHash}/nftId/{nftId}/utxo"
        let codeHashPreEscape = "\(APIHelper.mapValueToPathItem(codeHash))"
        let codeHashPostEscape = codeHashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeHash}", with: codeHashPostEscape, options: .literal, range: nil)
        let nftIdPreEscape = "\(APIHelper.mapValueToPathItem(nftId))"
        let nftIdPostEscape = nftIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nftId}", with: nftIdPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ContractNftAuctionUtxo]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get nft summary(count group by address) for specific codeHash and genesisId(result cached for 60s).
     
     - parameter codeHash: (path) Code hash of the token. 
     - parameter genesis: (path) Contract genesis 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func contractNftGenesisCodeHashGenesisSummaryGet(codeHash: String, genesis: String, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ContractNftGenesisSummary]?,_ error: Error?) -> Void)) {
        contractNftGenesisCodeHashGenesisSummaryGetWithRequestBuilder(codeHash: codeHash, genesis: genesis).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get nft summary(count group by address) for specific codeHash and genesisId(result cached for 60s).
     - GET /contract/nft/genesis/{codeHash}/{genesis}/summary
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter codeHash: (path) Code hash of the token. 
     - parameter genesis: (path) Contract genesis 
     - returns: RequestBuilder<[ContractNftGenesisSummary]> 
     */
    open class func contractNftGenesisCodeHashGenesisSummaryGetWithRequestBuilder(codeHash: String, genesis: String) -> RequestBuilder<[ContractNftGenesisSummary]> {
        var path = "/contract/nft/genesis/{codeHash}/{genesis}/summary"
        let codeHashPreEscape = "\(APIHelper.mapValueToPathItem(codeHash))"
        let codeHashPostEscape = codeHashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeHash}", with: codeHashPostEscape, options: .literal, range: nil)
        let genesisPreEscape = "\(APIHelper.mapValueToPathItem(genesis))"
        let genesisPostEscape = genesisPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{genesis}", with: genesisPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ContractNftGenesisSummary]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all contract nft token utxos by codeHash and genesisId.
     
     - parameter codeHash: (path) Code hash of the token. 
     - parameter genesis: (path) Contract genesis 
     - parameter tokenIndex: (query) Find exact token Index. (optional)
     - parameter max: (query) Token index not bigger than this(include this). (optional)
     - parameter min: (query) Token index not less than this(include this). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func contractNftGenesisCodeHashGenesisUtxoGet(codeHash: String, genesis: String, tokenIndex: Int64? = nil, max: Int64? = nil, min: Int64? = nil, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ContractNftUtxo]?,_ error: Error?) -> Void)) {
        contractNftGenesisCodeHashGenesisUtxoGetWithRequestBuilder(codeHash: codeHash, genesis: genesis, tokenIndex: tokenIndex, max: max, min: min).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all contract nft token utxos by codeHash and genesisId.
     - GET /contract/nft/genesis/{codeHash}/{genesis}/utxo
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter codeHash: (path) Code hash of the token. 
     - parameter genesis: (path) Contract genesis 
     - parameter tokenIndex: (query) Find exact token Index. (optional)
     - parameter max: (query) Token index not bigger than this(include this). (optional)
     - parameter min: (query) Token index not less than this(include this). (optional)
     - returns: RequestBuilder<[ContractNftUtxo]> 
     */
    open class func contractNftGenesisCodeHashGenesisUtxoGetWithRequestBuilder(codeHash: String, genesis: String, tokenIndex: Int64? = nil, max: Int64? = nil, min: Int64? = nil) -> RequestBuilder<[ContractNftUtxo]> {
        var path = "/contract/nft/genesis/{codeHash}/{genesis}/utxo"
        let codeHashPreEscape = "\(APIHelper.mapValueToPathItem(codeHash))"
        let codeHashPostEscape = codeHashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeHash}", with: codeHashPostEscape, options: .literal, range: nil)
        let genesisPreEscape = "\(APIHelper.mapValueToPathItem(genesis))"
        let genesisPostEscape = genesisPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{genesis}", with: genesisPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "tokenIndex": tokenIndex?.encodeToJSON(), 
            "max": max?.encodeToJSON(), 
            "min": min?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ContractNftUtxo]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all contract sell sell utxos for specific address.
     
     - parameter address: (path) Owner address. 
     - parameter codeHash: (query) Filter by contract code hash (optional)
     - parameter genesis: (query) Filter by contract genesis (optional)
     - parameter flag: (query) The flag of the last query Item(Paging flag) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func contractNftSellAddressAddressUtxoGet(address: String, codeHash: String? = nil, genesis: String? = nil, flag: String? = nil, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ContractNftSellUtxo]?,_ error: Error?) -> Void)) {
        contractNftSellAddressAddressUtxoGetWithRequestBuilder(address: address, codeHash: codeHash, genesis: genesis, flag: flag).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all contract sell sell utxos for specific address.
     - GET /contract/nft/sell/address/{address}/utxo
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter address: (path) Owner address. 
     - parameter codeHash: (query) Filter by contract code hash (optional)
     - parameter genesis: (query) Filter by contract genesis (optional)
     - parameter flag: (query) The flag of the last query Item(Paging flag) (optional)
     - returns: RequestBuilder<[ContractNftSellUtxo]> 
     */
    open class func contractNftSellAddressAddressUtxoGetWithRequestBuilder(address: String, codeHash: String? = nil, genesis: String? = nil, flag: String? = nil) -> RequestBuilder<[ContractNftSellUtxo]> {
        var path = "/contract/nft/sell/address/{address}/utxo"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "codeHash": codeHash?.encodeToJSON(), 
            "genesis": genesis?.encodeToJSON(), 
            "flag": flag?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ContractNftSellUtxo]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all contract nft token utxos by codeHash and genesisId.
     
     - parameter codeHash: (path) Code hash of the token. 
     - parameter genesis: (path) Contract genesis 
     - parameter tokenIndex: (query) Find exact token Index. (optional)
     - parameter max: (query) Token index not bigger than this(include this). (optional)
     - parameter min: (query) Token index not less than this(include this). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func contractNftSellGenesisCodeHashGenesisUtxoGet(codeHash: String, genesis: String, tokenIndex: Int64? = nil, max: Int64? = nil, min: Int64? = nil, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ContractNftSellUtxo]?,_ error: Error?) -> Void)) {
        contractNftSellGenesisCodeHashGenesisUtxoGetWithRequestBuilder(codeHash: codeHash, genesis: genesis, tokenIndex: tokenIndex, max: max, min: min).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all contract nft token utxos by codeHash and genesisId.
     - GET /contract/nft/sell/genesis/{codeHash}/{genesis}/utxo
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter codeHash: (path) Code hash of the token. 
     - parameter genesis: (path) Contract genesis 
     - parameter tokenIndex: (query) Find exact token Index. (optional)
     - parameter max: (query) Token index not bigger than this(include this). (optional)
     - parameter min: (query) Token index not less than this(include this). (optional)
     - returns: RequestBuilder<[ContractNftSellUtxo]> 
     */
    open class func contractNftSellGenesisCodeHashGenesisUtxoGetWithRequestBuilder(codeHash: String, genesis: String, tokenIndex: Int64? = nil, max: Int64? = nil, min: Int64? = nil) -> RequestBuilder<[ContractNftSellUtxo]> {
        var path = "/contract/nft/sell/genesis/{codeHash}/{genesis}/utxo"
        let codeHashPreEscape = "\(APIHelper.mapValueToPathItem(codeHash))"
        let codeHashPostEscape = codeHashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeHash}", with: codeHashPostEscape, options: .literal, range: nil)
        let genesisPreEscape = "\(APIHelper.mapValueToPathItem(genesis))"
        let genesisPostEscape = genesisPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{genesis}", with: genesisPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "tokenIndex": tokenIndex?.encodeToJSON(), 
            "max": max?.encodeToJSON(), 
            "min": min?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ContractNftSellUtxo]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all contract sell sell utxos for specific address.
     
     - parameter address: (path) Owner address. 
     - parameter codeHash: (query) Filter by contract code hash (optional)
     - parameter genesis: (query) Filter by contract genesis (optional)
     - parameter flag: (query) The flag of the last query Item(Paging flag) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func contractNftSellV2AddressAddressUtxoGet(address: String, codeHash: String? = nil, genesis: String? = nil, flag: String? = nil, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ContractNftSellV2Utxo]?,_ error: Error?) -> Void)) {
        contractNftSellV2AddressAddressUtxoGetWithRequestBuilder(address: address, codeHash: codeHash, genesis: genesis, flag: flag).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all contract sell sell utxos for specific address.
     - GET /contract/nft/sellV2/address/{address}/utxo
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter address: (path) Owner address. 
     - parameter codeHash: (query) Filter by contract code hash (optional)
     - parameter genesis: (query) Filter by contract genesis (optional)
     - parameter flag: (query) The flag of the last query Item(Paging flag) (optional)
     - returns: RequestBuilder<[ContractNftSellV2Utxo]> 
     */
    open class func contractNftSellV2AddressAddressUtxoGetWithRequestBuilder(address: String, codeHash: String? = nil, genesis: String? = nil, flag: String? = nil) -> RequestBuilder<[ContractNftSellV2Utxo]> {
        var path = "/contract/nft/sellV2/address/{address}/utxo"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "codeHash": codeHash?.encodeToJSON(), 
            "genesis": genesis?.encodeToJSON(), 
            "flag": flag?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ContractNftSellV2Utxo]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all contract nft token utxos by codeHash and genesisId.
     
     - parameter codeHash: (path) Code hash of the token. 
     - parameter genesis: (path) Contract genesis 
     - parameter tokenIndex: (query) Find exact token Index. (optional)
     - parameter max: (query) Token index not bigger than this(include this). (optional)
     - parameter min: (query) Token index not less than this(include this). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func contractNftSellV2GenesisCodeHashGenesisUtxoGet(codeHash: String, genesis: String, tokenIndex: Int64? = nil, max: Int64? = nil, min: Int64? = nil, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ContractNftSellV2Utxo]?,_ error: Error?) -> Void)) {
        contractNftSellV2GenesisCodeHashGenesisUtxoGetWithRequestBuilder(codeHash: codeHash, genesis: genesis, tokenIndex: tokenIndex, max: max, min: min).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all contract nft token utxos by codeHash and genesisId.
     - GET /contract/nft/sellV2/genesis/{codeHash}/{genesis}/utxo
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter codeHash: (path) Code hash of the token. 
     - parameter genesis: (path) Contract genesis 
     - parameter tokenIndex: (query) Find exact token Index. (optional)
     - parameter max: (query) Token index not bigger than this(include this). (optional)
     - parameter min: (query) Token index not less than this(include this). (optional)
     - returns: RequestBuilder<[ContractNftSellV2Utxo]> 
     */
    open class func contractNftSellV2GenesisCodeHashGenesisUtxoGetWithRequestBuilder(codeHash: String, genesis: String, tokenIndex: Int64? = nil, max: Int64? = nil, min: Int64? = nil) -> RequestBuilder<[ContractNftSellV2Utxo]> {
        var path = "/contract/nft/sellV2/genesis/{codeHash}/{genesis}/utxo"
        let codeHashPreEscape = "\(APIHelper.mapValueToPathItem(codeHash))"
        let codeHashPostEscape = codeHashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeHash}", with: codeHashPostEscape, options: .literal, range: nil)
        let genesisPreEscape = "\(APIHelper.mapValueToPathItem(genesis))"
        let genesisPostEscape = genesisPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{genesis}", with: genesisPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "tokenIndex": tokenIndex?.encodeToJSON(), 
            "max": max?.encodeToJSON(), 
            "min": min?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ContractNftSellV2Utxo]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get contract unique utxos by codeHash and genesisId.
     
     - parameter codeHash: (path) Code hash of the token. 
     - parameter genesis: (path) Contract genesis 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func contractUniqueGenesisCodeHashGenesisUtxoGet(codeHash: String, genesis: String, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ContractUniqueUtxo]?,_ error: Error?) -> Void)) {
        contractUniqueGenesisCodeHashGenesisUtxoGetWithRequestBuilder(codeHash: codeHash, genesis: genesis).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get contract unique utxos by codeHash and genesisId.
     - GET /contract/unique/genesis/{codeHash}/{genesis}/utxo
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter codeHash: (path) Code hash of the token. 
     - parameter genesis: (path) Contract genesis 
     - returns: RequestBuilder<[ContractUniqueUtxo]> 
     */
    open class func contractUniqueGenesisCodeHashGenesisUtxoGetWithRequestBuilder(codeHash: String, genesis: String) -> RequestBuilder<[ContractUniqueUtxo]> {
        var path = "/contract/unique/genesis/{codeHash}/{genesis}/utxo"
        let codeHashPreEscape = "\(APIHelper.mapValueToPathItem(codeHash))"
        let codeHashPostEscape = codeHashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeHash}", with: codeHashPostEscape, options: .literal, range: nil)
        let genesisPreEscape = "\(APIHelper.mapValueToPathItem(genesis))"
        let genesisPostEscape = genesisPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{genesis}", with: genesisPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ContractUniqueUtxo]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
