//
// MerchantAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class MerchantAPI {
    /**
     Pick utxos by addresses and amount.
     
     - parameter utxoPickRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func merchantUtxoPost(utxoPickRequest: UtxoPickRequest? = nil, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AddressUtxo]?,_ error: Error?) -> Void)) {
        merchantUtxoPostWithRequestBuilder(utxoPickRequest: utxoPickRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Pick utxos by addresses and amount.
     - POST /merchant/utxo
     - Selects a set of Utxos with total value higher than the given amount from a given address list . In case of HD wallets, multiple addresses can be specified.
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter utxoPickRequest: (body)  (optional)
     - returns: RequestBuilder<[AddressUtxo]> 
     */
    open class func merchantUtxoPostWithRequestBuilder(utxoPickRequest: UtxoPickRequest? = nil) -> RequestBuilder<[AddressUtxo]> {
        let path = "/merchant/utxo"
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: utxoPickRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[AddressUtxo]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
