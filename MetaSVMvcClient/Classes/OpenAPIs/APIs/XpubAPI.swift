//
// XpubAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class XpubAPI {
    /**
     Get xpub address type and index. Only index under /0/70 /1/30 is valid. Otherwise not found.
     
     - parameter xpub: (path) the requested xpub 
     - parameter address: (path) the requested address 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func xpubLiteXpubAddressAddressGet(xpub: String, address: String, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: XpubAddress?,_ error: Error?) -> Void)) {
        xpubLiteXpubAddressAddressGetWithRequestBuilder(xpub: xpub, address: address).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get xpub address type and index. Only index under /0/70 /1/30 is valid. Otherwise not found.
     - GET /xpubLite/{xpub}/address/{address}
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter xpub: (path) the requested xpub 
     - parameter address: (path) the requested address 
     - returns: RequestBuilder<XpubAddress> 
     */
    open class func xpubLiteXpubAddressAddressGetWithRequestBuilder(xpub: String, address: String) -> RequestBuilder<XpubAddress> {
        var path = "/xpubLite/{xpub}/address/{address}"
        let xpubPreEscape = "\(APIHelper.mapValueToPathItem(xpub))"
        let xpubPostEscape = xpubPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{xpub}", with: xpubPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<XpubAddress>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get xpub balances including confirmed and unconfirmed.
     
     - parameter xpub: (path) the xpub to search 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func xpubLiteXpubBalanceGet(xpub: String, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: XpubLiteBalance?,_ error: Error?) -> Void)) {
        xpubLiteXpubBalanceGetWithRequestBuilder(xpub: xpub).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get xpub balances including confirmed and unconfirmed.
     - GET /xpubLite/{xpub}/balance
     - This api returns confirmed balance(same as address balance), not sumed utxos.
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter xpub: (path) the xpub to search 
     - returns: RequestBuilder<XpubLiteBalance> 
     */
    open class func xpubLiteXpubBalanceGetWithRequestBuilder(xpub: String) -> RequestBuilder<XpubLiteBalance> {
        var path = "/xpubLite/{xpub}/balance"
        let xpubPreEscape = "\(APIHelper.mapValueToPathItem(xpub))"
        let xpubPostEscape = xpubPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{xpub}", with: xpubPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<XpubLiteBalance>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get xpub utxos by specific xpub(300 per page).
     
     - parameter xpub: (path) the requested xpub 
     - parameter limit: (query) The max items returned in this query(default 300), not bigger than 5000. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func xpubLiteXpubUtxoGet(xpub: String, limit: Int? = nil, apiResponseQueue: DispatchQueue = MetaSVMvcClientAPI.apiResponseQueue, completion: @escaping ((_ data: [XpubUtxo]?,_ error: Error?) -> Void)) {
        xpubLiteXpubUtxoGetWithRequestBuilder(xpub: xpub, limit: limit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get xpub utxos by specific xpub(300 per page).
     - GET /xpubLite/{xpub}/utxo
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter xpub: (path) the requested xpub 
     - parameter limit: (query) The max items returned in this query(default 300), not bigger than 5000. (optional)
     - returns: RequestBuilder<[XpubUtxo]> 
     */
    open class func xpubLiteXpubUtxoGetWithRequestBuilder(xpub: String, limit: Int? = nil) -> RequestBuilder<[XpubUtxo]> {
        var path = "/xpubLite/{xpub}/utxo"
        let xpubPreEscape = "\(APIHelper.mapValueToPathItem(xpub))"
        let xpubPostEscape = xpubPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{xpub}", with: xpubPostEscape, options: .literal, range: nil)
        let URLString = MetaSVMvcClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[XpubUtxo]>.Type = MetaSVMvcClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
