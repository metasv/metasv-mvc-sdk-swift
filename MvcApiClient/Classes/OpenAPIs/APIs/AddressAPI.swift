//
// AddressAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class AddressAPI {
    /**
     Get address balance by specific address.
     
     - parameter address: (path) the requested address 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addressAddressBalanceGet(address: String, apiResponseQueue: DispatchQueue = MvcApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddressBalance?,_ error: Error?) -> Void)) {
        addressAddressBalanceGetWithRequestBuilder(address: address).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get address balance by specific address.
     - GET /address/{address}/balance
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter address: (path) the requested address 
     - returns: RequestBuilder<AddressBalance> 
     */
    open class func addressAddressBalanceGetWithRequestBuilder(address: String) -> RequestBuilder<AddressBalance> {
        var path = "/address/{address}/balance"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = MvcApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AddressBalance>.Type = MvcApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get address history by specific address(recent 10 days available).
     
     - parameter address: (path) the requested address 
     - parameter flag: (query) The last id of the last query(Paging flag) (optional)
     - parameter confirmed: (query) (default true) fetch confirmed tx, fetch unconfirmed tx if false (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addressAddressTxGet(address: String, flag: String? = nil, confirmed: Bool? = nil, apiResponseQueue: DispatchQueue = MvcApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AddressTx]?,_ error: Error?) -> Void)) {
        addressAddressTxGetWithRequestBuilder(address: address, flag: flag, confirmed: confirmed).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get address history by specific address(recent 10 days available).
     - GET /address/{address}/tx
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter address: (path) the requested address 
     - parameter flag: (query) The last id of the last query(Paging flag) (optional)
     - parameter confirmed: (query) (default true) fetch confirmed tx, fetch unconfirmed tx if false (optional)
     - returns: RequestBuilder<[AddressTx]> 
     */
    open class func addressAddressTxGetWithRequestBuilder(address: String, flag: String? = nil, confirmed: Bool? = nil) -> RequestBuilder<[AddressTx]> {
        var path = "/address/{address}/tx"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = MvcApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "flag": flag?.encodeToJSON(), 
            "confirmed": confirmed?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[AddressTx]>.Type = MvcApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get address utxos by specific address(100 per page).
     
     - parameter address: (path) the requested address 
     - parameter flag: (query) The last id of the last query(Paging flag) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addressAddressUtxoGet(address: String, flag: String? = nil, apiResponseQueue: DispatchQueue = MvcApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AddressUtxo]?,_ error: Error?) -> Void)) {
        addressAddressUtxoGetWithRequestBuilder(address: address, flag: flag).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get address utxos by specific address(100 per page).
     - GET /address/{address}/utxo
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter address: (path) the requested address 
     - parameter flag: (query) The last id of the last query(Paging flag) (optional)
     - returns: RequestBuilder<[AddressUtxo]> 
     */
    open class func addressAddressUtxoGetWithRequestBuilder(address: String, flag: String? = nil) -> RequestBuilder<[AddressUtxo]> {
        var path = "/address/{address}/utxo"
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = MvcApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "flag": flag?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[AddressUtxo]>.Type = MvcApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
