//
// BlockHeaderIndex.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Detailed block header info. */
public struct BlockHeaderIndex: Codable {

    /** Block hash. */
    public var blockHash: String?
    /** Block height. */
    public var height: Int64?
    /** Block version. */
    public var version: Int64?
    /** The block hash of the previous block. */
    public var prevBlockHash: String?
    /** Hex formatted block merkle root. */
    public var merkleRoot: String?
    /** Block timestamp. */
    public var timestamp: Int64?
    /** Block median timestamp. */
    public var medianTime: Int64?
    /** Miner total rewards, including miner fee. */
    public var reward: Int64?
    /** Guessed miner name. */
    public var miner: String?
    /** Miner address that received rewards. */
    public var minerAddress: String?
    /** Total txs count included in the block. */
    public var txCount: Int?
    /** Total input count in the block. */
    public var inputCount: Int?
    /** Total output count in the block */
    public var outputCount: Int?
    /** Size of the block */
    public var size: Int64?
    /** Target bits. */
    public var bits: Int64?
    /** Block nonce */
    public var nonce: Int64?
    /** Hex formated coinbase info. */
    public var coinbase: String?

    public init(blockHash: String? = nil, height: Int64? = nil, version: Int64? = nil, prevBlockHash: String? = nil, merkleRoot: String? = nil, timestamp: Int64? = nil, medianTime: Int64? = nil, reward: Int64? = nil, miner: String? = nil, minerAddress: String? = nil, txCount: Int? = nil, inputCount: Int? = nil, outputCount: Int? = nil, size: Int64? = nil, bits: Int64? = nil, nonce: Int64? = nil, coinbase: String? = nil) {
        self.blockHash = blockHash
        self.height = height
        self.version = version
        self.prevBlockHash = prevBlockHash
        self.merkleRoot = merkleRoot
        self.timestamp = timestamp
        self.medianTime = medianTime
        self.reward = reward
        self.miner = miner
        self.minerAddress = minerAddress
        self.txCount = txCount
        self.inputCount = inputCount
        self.outputCount = outputCount
        self.size = size
        self.bits = bits
        self.nonce = nonce
        self.coinbase = coinbase
    }

}

